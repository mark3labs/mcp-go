// Code generated by `go generate`. DO NOT EDIT.
// source: server/internal/gen/callbacks.go.tmpl
package server

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
)

// OnBeforeAnyCallbackFunc is a function that is called after the request is
// parsed but before the method is called.
type OnBeforeAnyCallbackFunc func(id any, method mcp.MCPMethod, message any)

// OnAfterAnyCallbackFunc is a callback that will be called after the request
// successfully generates a result, but before the result is sent to the client.
type OnAfterAnyCallbackFunc func(id any, method mcp.MCPMethod, message any, result any)

// OnErrorCallbackFunc is a callback that will be called when an error occurs,
// either during the request parsing or the method execution.
type OnErrorCallbackFunc func(id any, method mcp.MCPMethod, message any, err error)

{{range .}}
type OnBefore{{.CallbackName}}Func func(id any, message *mcp.{{.ParamType}})
type OnAfter{{.CallbackName}}Func func(id any, message *mcp.{{.ParamType}}, result *mcp.{{.ResultType}})
{{end}}

type Callbacks struct {
	OnBeforeAny      []OnBeforeAnyCallbackFunc
	OnAfterAny       []OnAfterAnyCallbackFunc
	OnError          []OnErrorCallbackFunc
{{- range .}}
	OnBefore{{.CallbackName}} []OnBefore{{.CallbackName}}Func
	OnAfter{{.CallbackName}}  []OnAfter{{.CallbackName}}Func
{{- end}}
}

func (c *Callbacks) AddBeforeAny(callback OnBeforeAnyCallbackFunc) {
	c.OnBeforeAny = append(c.OnBeforeAny, callback)
}

func (c *Callbacks) AddAfterAny(callback OnAfterAnyCallbackFunc) {
	c.OnAfterAny = append(c.OnAfterAny, callback)
}

func (c *Callbacks) AddOnError(callback OnErrorCallbackFunc) {
	c.OnError = append(c.OnError, callback)
}

func (c *Callbacks) beforeAny(id any, method mcp.MCPMethod, message any) {
	if c == nil {
		return
	}
	for _, callback := range c.OnBeforeAny {
		callback(id, method, &message)
	}
}

func (c *Callbacks) afterAny(id any, method mcp.MCPMethod, message any, result any) {
	if c == nil {
		return
	}
	for _, callback := range c.OnAfterAny {
		callback(id, method, &message, result)
	}
}

func (c *Callbacks) onError(id any, method mcp.MCPMethod, message any, err error) {
	if c == nil {
		return
	}
	for _, callback := range c.OnError {
		callback(id, method, message, err)
	}
}

{{- range .}}
func (c *Callbacks) AddBefore{{.CallbackName}}(callback OnBefore{{.CallbackName}}Func) {
	c.OnBefore{{.CallbackName}} = append(c.OnBefore{{.CallbackName}}, callback)
}

func (c *Callbacks) AddAfter{{.CallbackName}}(callback OnAfter{{.CallbackName}}Func) {
	c.OnAfter{{.CallbackName}} = append(c.OnAfter{{.CallbackName}}, callback)
}

func (c *Callbacks) before{{.CallbackName}}(id any, message *mcp.{{.ParamType}}) {
	c.beforeAny(id, mcp.{{.MethodName}}, message)
	if c == nil {
		return
	}
	for _, callback := range c.OnBefore{{.CallbackName}} {
		callback(id, message)
	}
}

func (c *Callbacks) after{{.CallbackName}}(id any, message *mcp.{{.ParamType}}, result *mcp.{{.ResultType}}) {
	c.afterAny(id, mcp.{{.MethodName}}, message, result)
	if c == nil {
		return
	}
	for _, callback := range c.OnAfter{{.CallbackName}} {
		callback(id, message, result)
	}
}
{{- end -}}
